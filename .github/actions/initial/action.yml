name: Initial Environment Variables
description: 'Set initial environment variables and determine workflow flow'

outputs:
  should_deploy:
    description: 'Should deploy'
    value: ${{ steps.initial_calculate_version.outputs.should_deploy }}
  deployment_stage:
    description: 'Deployment stage'
    value: ${{ steps.initial_calculate_version.outputs.deployment_stage }}
  version:
    description: 'New version'
    value: ${{ steps.initial_calculate_version.outputs.version }}
  publish_type:
    description: 'Type of publishing process'
    value: ${{ steps.initial_calculate_version.outputs.publish_type }}

runs:
  using: "composite"
  steps:
  - name: Initial and calculate version
    id: initial_calculate_version
    shell: bash
    run: |
      # Function to print workflow summary in HTML format
      print_summary() {
        local event_name=$1
        local event_action=$2
        local ref=$3
        local should_deploy=$4
        local deploy_stage=$5
        local version=$6
        local publish_type=$7

        {
          echo "<div><table width='100%'><tr>"

          # Event Information
          echo "<td width='50%'>"
          echo "<h3>Event Details</h3>"
          echo "<table width='100%'>"
          echo "<tr><th align='left'>Type</th><th align='left'>Value</th></tr>"
          echo "<tr><td>Event Type</td><td><code>${event_name}</code></td></tr>"
          echo "<tr><td>Event Action</td><td><code>${event_action}</code></td></tr>"
          echo "<tr><td>Branch/Ref</td><td><code>${ref}</code></td></tr>"
          echo "</table>"
          echo "</td>"

          # Deployment Information
          echo "<td width='50%'>"
          echo "<h3>Deployment Details</h3>"
          echo "<table width='100%'>"
          echo "<tr><th align='left'>Setting</th><th align='left'>Value</th></tr>"
          echo "<tr><td>Should Deploy</td><td><code>${should_deploy}</code></td></tr>"
          echo "<tr><td>Deploy Stage</td><td><code>${deploy_stage}</code></td></tr>"
          if [[ -n "${version}" ]]; then
            echo "<tr><td>Version</td><td><code>${version}</code></td></tr>"
          fi
          if [[ -n "${publish_type}" ]]; then
            echo "<tr><td>Publish Type</td><td><code>${publish_type}</code></td></tr>"
          fi
          echo "</table>"
          echo "</td>"

          echo "</tr></table></div>"
        } >> $GITHUB_STEP_SUMMARY
      }

      # Function to calculate new version
      calculate_version() {
        local deploy_stage=$1
        local TODAY=$(date +'%Y.%m%d')
        CURRENT_VERSION=$(grep -oP '^version = "\K[^"]+' pyproject.toml || echo "0.0.0")

        # Calculate version number
        if [[ $CURRENT_VERSION == $TODAY.* ]]; then
          local NEW_COUNT=$(($(echo $CURRENT_VERSION | cut -d. -f3 | cut -d- -f1) + 1))
        else
          local NEW_COUNT=1
        fi

        # Set version with stage suffix
        local NEW_VERSION="$TODAY.$NEW_COUNT"
        case "$deploy_stage" in
          "beta") NEW_VERSION="$NEW_VERSION-beta" ;;
          "dev") NEW_VERSION="$NEW_VERSION-dev" ;;
        esac

        echo "$NEW_VERSION"
      }

      # Function to determine publish type
      determine_publish_type() {
        local event_name=$1
        local event_action=$2
        local deploy_stage=$3

        # Return values:
        # - direct: publish directly without creating release
        # - release: trigger release flow
        # - prerelease: trigger prerelease flow
        # - skip: no publish needed

        if [[ "$event_name" == "push" ]]; then
          case "$deploy_stage" in
            "dev") echo "direct" ;;
            "beta") echo "prerelease" ;;
            "production") echo "release" ;;
            *) echo "skip" ;;
          esac
        elif [[ "$event_name" == "release" ]]; then
          if [[ "$event_action" == "prereleased" ]]; then
            echo "prerelease"
          elif [[ "$event_action" == "released" ]]; then
            echo "release"
          else
            echo "skip"
          fi
        else
          echo "skip"
        fi
      }

      # Function to set outputs
      set_outputs() {
        local should_deploy=$1
        local deploy_stage=$2
        local version=""
        local publish_type=""

        echo "should_deploy=${should_deploy}" >> $GITHUB_OUTPUT
        echo "deployment_stage=${deploy_stage}" >> $GITHUB_OUTPUT

        # Calculate version and publish type only if should_deploy is true
        if [[ "$should_deploy" == "true" ]]; then
          version=$(calculate_version "$deploy_stage")
          echo "version=${version}" >> $GITHUB_OUTPUT

          publish_type=$(determine_publish_type "${{ github.event_name }}" "${{ github.event.action }}" "$deploy_stage")
          echo "publish_type=${publish_type}" >> $GITHUB_OUTPUT
        fi

        # Print summary
        print_summary \
          "${{ github.event_name }}" \
          "${{ github.event.action }}" \
          "${{ github.ref }}" \
          "${should_deploy}" \
          "${deploy_stage}" \
          "${version}" \
          "${publish_type}"
      }

      # Handle Release Events
      if [[ "${{ github.event_name }}" == "release" ]]; then
        case "${{ github.event.action }}" in
          "prereleased")
            set_outputs "true" "beta"
            ;;
          "released")
            set_outputs "true" "production"
            ;;
        esac
        exit 0
      fi

      # Handle Push Events
      if [[ "${{ github.event_name }}" == "push" ]]; then
        case "${{ github.ref }}" in
          "refs/heads/main"|"refs/heads/master"|"refs/heads/develop")
            set_outputs "true" "dev"
            ;;
          "refs/heads/staging")
            set_outputs "true" "beta"
            ;;
          "refs/heads/production")
            set_outputs "true" "production"
            ;;
        esac
        exit 0
      fi

      # Default fallback
      set_outputs "false" "unknown"
