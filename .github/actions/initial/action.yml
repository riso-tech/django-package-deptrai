name: Initial Environment Variables
description: 'Set initial environment variables for the workflow'

outputs:
  should_deploy:
    description: 'Should deploy'
    value: ${{ steps.check.outputs.should_deploy }}
  deployment_stage:
    description: 'Deployment stage'
    value: ${{ steps.check.outputs.deployment_stage }}

runs:
  using: "composite"
  steps:
  - name: Validate workflow conditions
    id: check
    shell: bash
    run: |
      # Function to set outputs
      set_outputs() {
        local should_deploy=$1
        local stage=$2

        echo "should_deploy=${should_deploy}" >> $GITHUB_OUTPUT
        echo "deployment_stage=${stage}" >> $GITHUB_OUTPUT

        {
          echo "<table><tr><td width='50%'>"
          echo "### 🔄 Workflow Context"
          echo "| Type | Value |"
          echo "| :--- | :--- |"
          echo "| Event Type | \`${{ github.event_name }}\` |"
          echo "| Event Action | \`${{ github.event.action }}\` |"
          echo "| Branch/Ref | \`${{ github.ref }}\` |"
          echo "</td><td width='50%'>"
          echo "### ✨ Deployment Details"
          echo "| Setting | Value |"
          echo "| :--- | :--- |"
          echo "| Should Deploy | \`${should_deploy}\` |"
          echo "| Stage | \`${stage}\` |"
          echo "</td></tr></table>"
        } >> $GITHUB_STEP_SUMMARY
      }

      # Handle Release Events (Release_case_1 & Release_case_2)
      if [[ "${{ github.event_name }}" == "release" ]]; then
        case "${{ github.event.action }}" in
          "prereleased")  # Release_case_1
            set_outputs "true" "beta"
            ;;
          "released")     # Release_case_2
            set_outputs "true" "production"
            ;;
        esac
        exit 0
      fi

      # Handle Push Events
      if [[ "${{ github.event_name }}" == "push" ]]; then
        case "${{ github.ref }}" in
          "refs/heads/main"|"refs/heads/master"|"refs/heads/develop")  # Push_case_1
            set_outputs "true" "dev"
            ;;
          "refs/heads/staging")  # Push_case_2
            set_outputs "true" "beta"
            ;;
          "refs/heads/production")  # Push_case_3
            set_outputs "true" "production"
            ;;
        esac
        exit 0
      fi

      # Handle Pull Request Events
      if [[ "${{ github.event_name }}" == "pull_request" ]]; then
        case "${{ github.base_ref }}" in
          "main"|"master"|"develop")  # PR_case_1
            set_outputs "false" "dev"
            ;;
          "staging")  # PR_case_2
            set_outputs "false" "beta"
            ;;
          "production")  # PR_case_3
            set_outputs "false" "production"
            ;;
        esac
        exit 0
      fi

      # Default fallback
      set_outputs "false" "unknown"
  # - name: Calculate version
  #   id: version
  #   if: steps.check.outputs.run_cd == 'true'
  #   shell: bash
  #   run: |
  #     TODAY=$(date +'%Y.%m%d')
  #     STAGE="${{ steps.check.outputs.stage }}"

  #     CURRENT_VERSION=$(grep -oP '^version = "\K[^"]+' pyproject.toml || echo "0.0.0")
  #     if [[ $CURRENT_VERSION == $TODAY.* ]]; then
  #       NEW_COUNT=$(($(echo $CURRENT_VERSION | cut -d. -f3 | cut -d- -f1) + 1))
  #     else
  #       NEW_COUNT=1
  #     fi

  #     NEW_VERSION="$TODAY.$NEW_COUNT"
  #     case "$STAGE" in
  #       "beta") NEW_VERSION="$NEW_VERSION-beta" ;;
  #       "dev") NEW_VERSION="$NEW_VERSION-dev" ;;
  #     esac

  #     echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT

  #     {
  #       echo "## 📝 Version Details"
  #       echo "- Current: $CURRENT_VERSION"
  #       echo "- New: $NEW_VERSION"
  #       echo "- Stage: $STAGE"
  #     } >> $GITHUB_STEP_SUMMARY
