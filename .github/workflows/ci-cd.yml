name: Django Package CI/CD

env:
  PYTHON_VERSION: '3.12'
  TWINE_USERNAME: __token__

on:
  push:
    branches:
      [
        main, # Push_case_1
        master, # Push_case_1
        develop, # Push_case_1
        staging, # Push_case_2
        production # Push_case_3
      ]
    paths:
    - django_package_name/**

  pull_request:
    types: [ opened, synchronize, reopened ]
    branches:
      [
        main, # PR_case_1
        master, # PR_case_1
        develop, # PR_case_1
        staging, # PR_case_2
        production # PR_case_3
      ]
    paths:
    - django_package_name/**

  release:
    types:
      [
        prereleased, # Release_case_1
        released # Release_case_2
      ]

jobs:
  initial_workflow:
    runs-on: ubuntu-latest
    outputs:
      should_deploy: ${{ steps.initial.outputs.should_deploy }}
      deployment_stage: ${{ steps.initial.outputs.deployment_stage }}
      version: ${{ steps.initial.outputs.version }}
      publish_type: ${{ steps.initial.outputs.publish_type }}
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Initial
      id: initial
      uses: ./.github/actions/initial

  pre-commit-linter:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Pre-Commit Linter
      uses: ./.github/actions/pre-commit-linter
      with:
        python-version: ${{ env.PYTHON_VERSION }}

  django-pytest-coverage:
    needs: [initial_workflow, pre-commit-linter]
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: PyTest Coverage
      uses: ./.github/actions/pytest-coverage
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        codecov-token: ${{ secrets.CODECOV_TOKEN }}

  django-python-build:
    if: ${{ needs.initial_workflow.outputs.should_deploy == 'true' }}
    needs: [initial_workflow, django-pytest-coverage]
    runs-on: ubuntu-latest
    permissions:
      packages: write
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Python Build ${{ needs.initial_workflow.outputs.version }}
      uses: ./.github/actions/python-build
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        package-name: ${{ needs.initial_workflow.outputs.version }}

  django-python-publish:
    if: ${{ needs.initial_workflow.outputs.should_deploy == 'true' }}
    needs: [django-python-build]
    runs-on: ubuntu-latest
    permissions:
      packages: write
      id-token: write
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Check Repository Visibility
      id: repo-visibility
      run: |
        visibility=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
        https://api.github.com/repos/${{ github.repository }} | jq -r .visibility)
        echo "visibility=$visibility" >> $GITHUB_OUTPUT

    - name: Python Publish ${{ needs.initial_workflow.outputs.version }} to Private PyPi
      if: steps.repo-visibility.outputs.visibility == 'private'
      uses: ./.github/actions/python-publish
      with:
        package-name: ${{ needs.initial_workflow.outputs.version }}
        publish-type: ${{ needs.initial_workflow.outputs.publish_type }}
        twine-username: ${{ env.TWINE_USERNAME }}
        twine-password: ${{ secrets.PYPI_PASSWORD }}

    - name: Python Publish ${{ needs.initial_workflow.outputs.version }} to PyPi
      if: steps.repo-visibility.outputs.visibility == 'public'
      uses: ./.github/actions/python-publish
      with:
        package-name: ${{ needs.initial_workflow.outputs.version }}
        publish-type: ${{ needs.initial_workflow.outputs.publish_type }}
        twine-username: ${{ env.TWINE_USERNAME }}
        twine-password: ${{ secrets.PYPI_PASSWORD }}
